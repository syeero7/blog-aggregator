// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
INSERT INTO feed_follows (feed_id, user_id, created_at, updated_at) 
VALUES ($1, $2, $3, $4) RETURNING id, feed_id, user_id, created_at, updated_at)
SELECT
  ff.id, ff.feed_id, ff.user_id, ff.created_at, ff.updated_at,
  feeds.name AS feed_name,
  users.name AS username
FROM inserted_feed_follow ff
INNER JOIN feeds ON ff.feed_id = feeds.id
INNER JOIN users ON ff.user_id = users.id
`

type CreateFeedFollowParams struct {
	FeedID    int32
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	ID        int32
	FeedID    int32
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedName  string
	Username  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.FeedID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedName,
		&i.Username,
	)
	return i, err
}
